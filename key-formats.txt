Helana Solomon

=== QUESTION 1 ===

id_rsa_homework.pub content: 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDDczZscbXObLJ9HzBMW2C/9qybt31chP4edgB/C9SXT0+pnf2xwnzaKDPWn5Kwm8uWxI53ZLnlRpZ+TcyGgA5xE4s+hjLZkmtdnpU8krm7H9qzbLyQ5T+fFGx/pSo+X1YT3qDOl73xwvpYf2LWh0CFZlyGdtBQM8sAeSHUZnob8PncaVWD9dtEo2MHAerY/+u6xQXwfCHYFjhsL+YfjZXXqBRDNHBmA+nEkJYkTjlYEpKRcKsFEF8JIuQOy6uT5pkZ6zH6bpcLJVra/qfvJeIKhLuHhYsXKWHb1FVpXqvEl5AlKo4FfMLXr2MowyUmCIe+u+Po67FVWmcMIZMFk69rMA1cXZunZm2VxmKxGTAVj4CXUJ/fbAP2leIdnasKurHULfEFTytqoqq8GgXJK8bDNbE9WgcRcAiaeHq+7gBYCrjmTy9c0V5uuvNWsmi+1pTTze/TUxMF5GLb9ji1CvsmkuHRUlTXv0zFW8DjtcYHI1FdwQf6jOB9khO2/Ja0UHU= helan@helana-computer

*****after converting to .pem file:
 -----BEGIN RSA PUBLIC KEY-----
MIIBigKCAYEAw3M2bHG1zmyyfR8wTFtgv/asm7d9XIT+HnYAfwvUl09PqZ39scJ8
2igz1p+SsJvLlsSOd2S55UaWfk3MhoAOcROLPoYy2ZJrXZ6VPJK5ux/as2y8kOU/
nxRsf6UqPl9WE96gzpe98cL6WH9i1odAhWZchnbQUDPLAHkh1GZ6G/D53GlVg/Xb
RKNjBwHq2P/rusUF8Hwh2BY4bC/mH42V16gUQzRwZgPpxJCWJE45WBKSkXCrBRBf
CSLkDsurk+aZGesx+m6XCyVa2v6n7yXiCoS7h4WLFylh29RVaV6rxJeQJSqOBXzC
169jKMMlJgiHvrvj6OuxVVpnDCGTBZOvazANXF2bp2ZtlcZisRkwFY+Al1Cf32wD
9pXiHZ2rCrqx1C3xBU8raqKqvBoFySvGwzWxPVoHEXAImnh6vu4AWAq45k8vXNFe
brrzVrJovtaU083v01MTBeRi2/Y4tQr7JpLh0VJU179MxVvA47XGByNRXcEH+ozg
fZITtvyWtFB1AgMBAAE=
-----END RSA PUBLIC KEY-----

id_rsa-homework content:
-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

Question 2.
=== PRIVATE KEY ===

Question 3. I expect the version number, the modulus (RSA modulus n), the publicExponent which is the RSA public exponent e, the privateExponent which is the RSA private exponent d, prime1 and prime2 which are prime factors p and q of n, exponent1 and exponent2 where is d mod (p-1) and d mod (q-1), and finally the coefficent which is the CRT coefficent q ^(-1) mod p.

Question 4. I used Lapo Luchini's ASN.1 decorder to decode my private key file. I just copy and pasted the contents of my private key file into the converter. I also used Michael Holstrom's ASN.1 decoder just to see the difference in output and found that the converted text was in hex and did not have the names of each integer whereas in Luchini's ASN.1 decoder the names and values as integers were shown.

Question 5. 

PRIVATE KEY INFO: 

version INTEGER 0x00 (0 decimal)

modulus (computation of two prime numbers) INTEGER 0x00c373366c71b5ce6cb27d1f304c5b60bff6ac9bb77d5c84fe1e76007f0bd4974f4fa99dfdb1c27cda2833d69f92b09bcb96c48e7764b9e546967e4dcc86800e71138b3e8632d9926b5d9e953c92b9bb1fdab36cbc90e53f9f146c7fa52a3e5f5613dea0ce97bdf1c2fa587f62d6874085665c8676d05033cb007921d4667a1bf0f9dc695583f5db44a3630701ead8ffebbac505f07c21d816386c2fe61f8d95d7a8144334706603e9c49096244e395812929170ab05105f0922e40ecbab93e69919eb31fa6e970b255adafea7ef25e20a84bb87858b172961dbd455695eabc49790252a8e057cc2d7af6328c325260887bebbe3e8ebb1555a670c21930593af6b300d5c5d9ba7666d95c662b11930158f8097509fdf6c03f695e21d9dab0abab1d42df1054f2b6aa2aabc1a05c92bc6c335b13d5a071170089a787abeee00580ab8e64f2f5cd15e6ebaf356b268bed694d3cdefd3531305e462dbf638b50afb2692e1d15254d7bf4cc55bc0e3b5c60723515dc107fa8ce07d9213b6fc96b45075

publicExponent (RSA public key) INTEGER 0x010001

privateExponent (RSA private key) INTEGER 0x69e2d41c422a5dcff38ee7c3b1ca5b8b04279520fe508e5861c64a148a233d6a215d62139c27229ec9e2f3a675c12a564cb2e5fff6d8e346afa7739c974d6f0581b2114880e9f0722c410ad6cb22c626c6c427e7ac941638a7c6f40c55eb7e98d2a0ecfb9fa7aeff93c3381822e319686c013a73c9fd7961c43adbc20756a62692270005ed3cd7f2c29596a94a430fbaf4ef627d5bb2b62fab97a9078216a1943921e91ad2bde1e6d6b002375f0da01247c77583a175b216f0091f9ee5b075df8eb994861608e3ee233b2d886953f10a39878ec3abae9f00e85dd42d629f80ef1bad7764e21bc4ed403b9292e84f1e0fc496d72b4d53f890b31a38c17041225a9da90aa04e26b50da6c2693e1181cf5c80d3b468808f0fcf69a62066c0211065442d872379baf543043b8153317892d6c17d3c06a2aca0a72346e21af48a048b81a21f308d899c296d670bad25edfc4a5127920e90cd8ff6afda8822457d40ac7159577ab044b33fd87728449fd0934ac0c21a24b33a61c13cd014c6e98a0c01

prime1 (RSA prime number 1) INTEGER 0x00f355965d1b74c435f54609a00c75cd419734ae0fe10eede8d78891d7b64205ed4c3631d01a362c1467669f9c2745ed94122900c688f7c3613a9cab4dc1d5ad976737c137d3367432b8a2a565f7a003d69f9c203637a1fd1a2e8edf7c47b25c561367682c6e3aa92b85aa5664964d8258e3e26ac18a5b204d3bbb4545a5a1ec0f92a19ce944aabadf6c2e35d925615ea7e4648542b63fc3716180b828baf29274bb8a1a34be0926cb1aa2e4b32aa36abf81563c31e968365b1a83e25a95a24f01

prime2 (RSA prime number 2) INTEGER 0x00cd9f9215c2c187b9eca634adbc99c8d1037da1f415e53a93289297f20639f90c9f8af52d6fb755db21adfef1574faab5ef6c3fce81549765d778693369764dd33c867e3b62f1404cca347d23f1f8018694296405af7e2c1b0eb15f46decec3acab67e3f867209886999adcf44a86d911136e9ccee051e45466a60a2254619d86b02e77ec6fd3908643107b6a4eb2db9e97b503a50fd79dc21128e2d8d06331493deca8a14590f922665e70322fd490fcf53feebfbfa1778b04d0ca6c542b3575

exponent1 (part of CRT (?) - d mod (p-1)) INTEGER 0x64e61d6658272fe10be651c16ac942262b73ada569f60dd299e4c84cc107597bcf393da883e5e89b4150fd67fba4f4618cb231df2116538eb2861a4630d4d09952347d4b0faaa9be0a6f6ed3fc3cfeba750e8110da3ab23fb4048c48f555d111e413e1cf6299b2621897cc21036dfa59af8cc8259ea030a1b5ddee5875d8d1909785aa11d3e6537ca757f5fe2790db7614af55ce96d193d224d30209e9930205a36a1d79b73f0635fbc285c08132a7e5e6d4823b5404615d9f7e0652f76f0901

exponent2 (part of CRT (?)- d mod (q-1)) INTEGER 0x00ad62a6ae4ec11e0fbaeb1374849a30697ec60b3064de1c1c4694062800f4157b7d7490f53544a4d2d87d7d82481b57597e800af5b8bc79c55881a243c5e40a0fdaf395b1c1e6a84f9819d683dedf3f7a19a9253c5e14c860306d8467a02d3d76763a6e52e1b2ecaa630fe0cce5a2fb9a9886271792b3bb1328534e2c5076d77be147edbba33804a01220edd0607815148fdc052cc4450e33bc807b78538fb0d98fabe52dc8194cdaa2f3732bfe8501952bc03333e104e866833303dd80c3c699

coefficient (CRT coefficient q^(-1) mod p) INTEGER 0x00bdfe7be6f5bd158d7283f26a2b56135bab1f70dd03bf26e5bf8638dccf724be822f37affcded0aca830986191160e1d0f68e50fc00c3b672935777ea60ab4815caa1f4f44d41db82f4e3ef9d79904ed9cb561d4060817093b7dae29653873d635db6bb4cec6e927a4b939a2abd40d6c1af0aa61e09de051d56bb6311d53fb87953dd2276e17c523ed6d2177df22f38cbbb51d19bbf0b7df8e01a3ae20a10c808276f5c8ee49ae34b4121186e2f0cd70c43a52aab1aac56fc708941432e27c400

Question 6.
=== PUBLIC KEY ===

Question 7. I expect the modulus which is the RSA modulus n and the publicExponent which is the RSA public exponent e.

To decode the file, I first changed the public key file from pub format into a PEM file format using the command "ssh-keygen -f id_rsa_homework.pub -e -m pem > id_rsa_homework.pem." Then I called cat id_rsa_homework.pem to get the contents of the public key and put it through the ASN decoder - http://ldh.org/asn1.html. In RSA encryption, the public keys that are sent by the individual (me..Bob...or Alice) are my n and e values generated. This corresponds to the n and e values found in the public key file. 

modulus (computation of two prime numbers) INTEGER 0x00c373366c71b5ce6cb27d1f304c5b60bff6ac9bb77d5c84fe1e76007f0bd4974f4fa99dfdb1c27cda2833d69f92b09bcb96c48e7764b9e546967e4dcc86800e71138b3e8632d9926b5d9e953c92b9bb1fdab36cbc90e53f9f146c7fa52a3e5f5613dea0ce97bdf1c2fa587f62d6874085665c8676d05033cb007921d4667a1bf0f9dc695583f5db44a3630701ead8ffebbac505f07c21d816386c2fe61f8d95d7a8144334706603e9c49096244e395812929170ab05105f0922e40ecbab93e69919eb31fa6e970b255adafea7ef25e20a84bb87858b172961dbd455695eabc49790252a8e057cc2d7af6328c325260887bebbe3e8ebb1555a670c21930593af6b300d5c5d9ba7666d95c662b11930158f8097509fdf6c03f695e21d9dab0abab1d42df1054f2b6aa2aabc1a05c92bc6c335b13d5a071170089a787abeee00580ab8e64f2f5cd15e6ebaf356b268bed694d3cdefd3531305e462dbf638b50afb2692e1d15254d7bf4cc55bc0e3b5c60723515dc107fa8ce07d9213b6fc96b45075

public exponent (rsa public key) 0x010001 (65537 decimal)


Question 8. 

=== SANITY CHECK ===

Question 9.

Checking to make sure e*d mod lambda(n) = 1.

Getting the integer values from here: https://lapo.it/asn1js/

p =
2291061519271389545377879291861745758169993237648989416748241963468522855196478239481861969284602423028287315222784971507594478376879539445479588618090903751538709298090253733162506216162393582557591229015587319430217034974820867580565166333530794847505807839225567232633303325630959655508059064854038765481954833219405649371547488060247890091691830431082805017664138969130310178036771373963728856318029184758034713876831995662447090375737268571728709553236365057

q = 
1936001758916159302779934539414412512116504877229764813359637135067956763474305936374917678439020385227077715730599245234461828722030745503248877515497869925837281909270877576448175678519524405961988138108259586262978304522266253871829900098340256332334925434476123887604417261936551848411598784078789502365471363226656712632161910381266265625642504891324691251773233190361778743231051635894548286809551427689024015513924758120870756995924537922437960390616495477

lcm (p-1, q-1) =  4435499131094538363076008888622645479616889703798010866878108987143648107237458433657879667119485417526613016143910410720094179048691918984202203456091325381945769075886581459435894662916651859807713484390849363990929501337934394786781956485741636452867034008982377136428565983866231826568459639702865255136425633446316261211997519740445269069970527866076743463585053325449887552671069631435586724553524721225429701597006545406796649751209602317295107516993198587801510285997966557918446596244677824801530818157358135389467994214024329036690974159234289351171109669249904433084649082335980872466135475570000263977427345652444821614972934031623826052918552395221710905685349541905250455516126397153426860405403257798934698854059856294523989855018053171256911683108707966012371108807197899324127536466147225291052818617615563022763932870341243903536384113678658449940894100333763775159508546190478892907508772996332055708486656 

p -1 = 2291061519271389545377879291861745758169993237648989416748241963468522855196478239481861969284602423028287315222784971507594478376879539445479588618090903751538709298090253733162506216162393582557591229015587319430217034974820867580565166333530794847505807839225567232633303325630959655508059064854038765481954833219405649371547488060247890091691830431082805017664138969130310178036771373963728856318029184758034713876831995662447090375737268571728709553236365056
q -1 = 1936001758916159302779934539414412512116504877229764813359637135067956763474305936374917678439020385227077715730599245234461828722030745503248877515497869925837281909270877576448175678519524405961988138108259586262978304522266253871829900098340256332334925434476123887604417261936551848411598784078789502365471363226656712632161910381266265625642504891324691251773233190361778743231051635894548286809551427689024015513924758120870756995924537922437960390616495476

e = 65537
d = 2402954005363559280727126593993423985745421196169314674588511216389752751079023478142469407831871000339997179275669303334253075775879374758290724838007881161572615942740025858938789386252891103994276016041276022224055906510877224879147555808570071902269619336999241653247726250166631994176009880031893905482685995933769608836717761545150209474484697070129160270909369033066790630599300048279910686410316237043332492411946189094226391952892212494858824669894006681109794813683229361107381271642999926294739638657201284724706061226008724879803973900599866387129869368550862213660534746301158137798650229032651164571441443877352539656066252998959426644626290535000791090626033164248377518395716430885338368840408359676994315925559534274334715653789706239917552669618302277084230834768139545836750967884257094983884375620160223463436431886742845488732461326520297973131993301987431265346878113622731481341549033145166389031078913

=================
checking e*d mod lambda(n) = 1
=================
Commands put into python3 interpreter

>>> e = 65537
>>> d = 2402954005363559280727126593993423985745421196169314674588511216389752751079023478142469407831871000339997179275669303334253075775879374758290724838007881161572615942740025858938789386252891103994276016041276022224055906510877224879147555808570071902269619336999241653247726250166631994176009880031893905482685995933769608836717761545150209474484697070129160270909369033066790630599300048279910686410316237043332492411946189094226391952892212494858824669894006681109794813683229361107381271642999926294739638657201284724706061226008724879803973900599866387129869368550862213660534746301158137798650229032651164571441443877352539656066252998959426644626290535000791090626033164248377518395716430885338368840408359676994315925559534274334715653789706239917552669618302277084230834768139545836750967884257094983884375620160223463436431886742845488732461326520297973131993301987431265346878113622731481341549033145166389031078913
>>> n = 4435499131094538363076008888622645479616889703798010866878108987143648107237458433657879667119485417526613016143910410720094179048691918984202203456091325381945769075886581459435894662916651859807713484390849363990929501337934394786781956485741636452867034008982377136428565983866231826568459639702865255136425633446316261211997519740445269069970527866076743463585053325449887552671069631435586724553524721225429701597006545406796649751209602317295107516993198587801510285997966557918446596244677824801530818157358135389467994214024329036690974159234289351171109669249904433084649082335980872466135475570000263977427345652444821614972934031623826052918552395221710905685349541905250455516126397153426860405403257798934698854059856294523989855018053171256911683108707966012371108807197899324127536466147225291052818617615563022763932870341243903536384113678658449940894100333763775159508546190478892907508772996332055708486656
>>> e * d % n
1
=================

So, since e * d % n mod lambda(n) = 1, this shows that the integers found in the private file is expected from an RSA key pair because this accurate calculation needed to confirm the e and d values needed to encrypt and decrypt messages in RSA encryption. In addition, when using https://lapo.it/asn1js/ to find the integers from the public key file, the names of the integers did not match up to what was expected (only that website, I just wanted to find the integer values) but the integer values were equivalent to the modulus and publicExponent values in the private key file. The hex values were also equivalent. This should be true for RSA encryption because the publicExponent (e) and modulus (n) is shared publically in RSA encryption. This then demonstrates that the intergers found in these files work as expected from a key pair.

